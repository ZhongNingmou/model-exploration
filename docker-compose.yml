# export AWS_SECRET_ACCESS_KEY="minio123" 
# export AWS_ACCESS_KEY_ID="minio"
# mlflow server --backend-store-uri postgresql://user:password@127.0.0.1/mlflow --default-artifact-root http://127.0.0.1:9000/mlflow --host 0.0.0.0 --port 5000
version: '3.7'

networks:
  minio-ldap:
    name: minio-ldap
    driver: bridge
  front-tier:
  back-tier:

services:
  evidently_service:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - grafana
    volumes:
      - ./datasets:/app/datasets
    ports:
      - "8085:8085"
    networks:
      - back-tier
      - front-tier
  
  prometheus:
    image: prom/prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - back-tier
    restart: always

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
      - db
    ports:
      - "3000:3000"
    volumes:
      - ./config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      - ./config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      - ./dashboards:/opt/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - back-tier
      - front-tier
    restart: always
  
  db:
    container_name: mlflow_db
    image: postgres
    command: postgres -c stats_temp_directory=/tmp 
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      POSTGRES_DB: 'mlflow'
      POSTGRES_USER: 'user'
      POSTGRES_PASSWORD: 'password'
      POSTGRES_ROOT_PASSWORD: 'Ei96mPaJ38iD'
    ports:
      - '5432:5432'
    expose:
      - '5432'
    volumes:
      - ./data/db:/var/lib/postgresql/data
    networks:
      - back-tier

  # web:
  #   restart: always
  #   build: ./mlflow
  #   image: mlflow_server
  #   container_name: mlflow_server
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
  #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  #   command: mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} --default-artifact-root s3://mlflow/ --host 0.0.0.0

  minio:
    restart: always
    image: minio/minio:latest
    container_name: mlflow_s3
    ports:
      - "9000:9000"
      - "9001:9001"
    command: minio server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
      MINIO_IDENTITY_LDAP_SERVER_ADDR: openldap:389
      MINIO_IDENTITY_LDAP_LOOKUP_BIND_DN: 'cn=admin,dc=ningmoulocal,dc=com'
      MINIO_IDENTITY_LDAP_LOOKUP_BIND_PASSWORD: 'admin_pass'
      MINIO_IDENTITY_LDAP_USER_DN_SEARCH_BASE_DN: 'dc=ningmoulocal,dc=com'
      MINIO_IDENTITY_LDAP_USER_DN_SEARCH_FILTER: '(uid=%s)'
      MINIO_IDENTITY_LDAP_GROUP_SEARCH_BASE_DN: 'ou=guott,dc=ningmoulocal,dc=com'
      MINIO_IDENTITY_LDAP_GROUP_SEARCH_FILTER: '(&(objectclass=groupOfNames)(member=%d))'
      MINIO_IDENTITY_LDAP_TLS_SKIP_VERIFY: 'on'
      MINIO_IDENTITY_LDAP_SERVER_INSECURE: 'on'
      MINIO_IDENTITY_LDAP_SERVER_STARTTLS: 'on'
    volumes:
      - 'minio_data:/data'
    depends_on:
      - openldap
    networks:
      - minio-ldap

  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    container_name: mc
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add miniohost http://minio:9000 minio minio123;
      /usr/bin/mc alias set miniohost http://minio:9000;
      /usr/bin/tail -f /etc/hosts;
      "
    volumes:
      - ./wait-for-it.sh:/tmp/wait-for-it.sh
    networks:
      - minio-ldap

  openldap:
    image: osixia/openldap:latest
    container_name: openldap
    environment:
      LDAP_ORGANISATION: "ningmoulocal"
      LDAP_DOMAIN: "ningmoulocal.com"
      LDAP_BASE_DN: ""
      LDAP_ADMIN_PASSWORD: "admin_pass"
      #  LDAP_READONLY_USER: "false"
      #  LDAP_READONLY_USER_USERNAME: "readonly"
      #  LDAP_READONLY_USER_PASSWORD: "readonly"
      LDAP_TLS_VERIFY_CLIENT: "try"
    ports:
      - 389:389
      - 636:636
    networks:
      - minio-ldap

  phpldapadmin:
    image: osixia/phpldapadmin:latest
    container_name: phpldapadmin
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: openldap
      PHPLDAPADMIN_HTTPS: 'false'
    links:
      - openldap
    depends_on:
      - openldap
    ports:
      - 10004:80
    networks:
      - minio-ldap

volumes:
    # dbdata:
    minio_data:
      driver: local
    ldap_data:
      driver: local
    ldap_conf:
      driver: local
    prometheus_data: {}
    grafana_data: {}
